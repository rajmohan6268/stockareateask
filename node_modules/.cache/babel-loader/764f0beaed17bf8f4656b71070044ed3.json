{"ast":null,"code":"import { connect } from \"react-redux\";\nimport Table from \"./Table\";\n\nvar filterdatabyNamebasedonsearchvalue = function filterdatabyNamebasedonsearchvalue(data, searchValue, filterby) {\n  var cities = [];\n\n  if (searchValue === \"\") {\n    cities = data.map(function (obj) {\n      return obj;\n    });\n  } else {\n    cities = data.filter(function (obj) {\n      return obj[\"\".concat(filterby)].toLowerCase().includes(searchValue);\n    }).map(function (obj) {\n      return obj;\n    });\n  }\n\n  return cities;\n};\n\nvar getFilterCities = function getFilterCities(data, filterby, FilterValue, searchValue) {\n  console.log(filterdatabyNamebasedonsearchvalue(data, searchValue, filterby), \"filterdatabyfilbykeyandvalue\");\n  var cities = [];\n\n  if (filterby === \"All\" || FilterValue === \"All\") {\n    cities = data.map(function (obj) {\n      return obj;\n    });\n  } else {\n    cities = data.filter(function (obj) {\n      return obj[\"\".concat(filterby)] === FilterValue;\n    }).map(function (obj) {\n      return obj;\n    });\n    console.log(cities, \"+++++++++++data++++++++++++++\");\n  }\n\n  return cities;\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    cities: getFilterCities(state.data, state.visibilityFilter.filterbyKey, state.visibilityFilter.FilterValue, state.visibilityFilter.searchValue),\n    filterby: state.visibilityFilter.filterbyKey,\n    FilterValue: state.visibilityFilter.FilterValue\n  };\n};\n\nexport default connect(mapStateToProps)(Table);","map":{"version":3,"sources":["/home/mohan/Downloads/react-redux-filter-example-forked (7)/src/components/Table/index.js"],"names":["connect","Table","filterdatabyNamebasedonsearchvalue","data","searchValue","filterby","cities","map","obj","filter","toLowerCase","includes","getFilterCities","FilterValue","console","log","mapStateToProps","state","visibilityFilter","filterbyKey"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AACA,IAAMC,kCAAkC,GAAG,SAArCA,kCAAqC,CACzCC,IADyC,EAGzCC,WAHyC,EAIzCC,QAJyC,EAKtC;AACH,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAIF,WAAW,KAAK,EAApB,EAAwB;AACtBE,IAAAA,MAAM,GAAGH,IAAI,CAACI,GAAL,CAAS,UAACC,GAAD;AAAA,aAASA,GAAT;AAAA,KAAT,CAAT;AACD,GAFD,MAEO;AACLF,IAAAA,MAAM,GAAGH,IAAI,CACVM,MADM,CACC,UAACD,GAAD;AAAA,aAASA,GAAG,WAAIH,QAAJ,EAAH,CAAmBK,WAAnB,GAAiCC,QAAjC,CAA0CP,WAA1C,CAAT;AAAA,KADD,EAENG,GAFM,CAEF,UAACC,GAAD,EAAS;AACZ,aAAOA,GAAP;AACD,KAJM,CAAT;AAKD;;AACD,SAAOF,MAAP;AAED,CAlBD;;AAmBA,IAAMM,eAAe,GAAG,SAAlBA,eAAkB,CAACT,IAAD,EAAOE,QAAP,EAAiBQ,WAAjB,EAA8BT,WAA9B,EAA8C;AACpEU,EAAAA,OAAO,CAACC,GAAR,CACEb,kCAAkC,CAACC,IAAD,EAAOC,WAAP,EAAoBC,QAApB,CADpC,EAEE,8BAFF;AAIA,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAID,QAAQ,KAAK,KAAb,IAAsBQ,WAAW,KAAK,KAA1C,EAAiD;AAC/CP,IAAAA,MAAM,GAAGH,IAAI,CAACI,GAAL,CAAS,UAACC,GAAD;AAAA,aAASA,GAAT;AAAA,KAAT,CAAT;AACD,GAFD,MAEO;AACLF,IAAAA,MAAM,GAAGH,IAAI,CACVM,MADM,CACC,UAACD,GAAD;AAAA,aAASA,GAAG,WAAIH,QAAJ,EAAH,KAAuBQ,WAAhC;AAAA,KADD,EAENN,GAFM,CAEF,UAACC,GAAD,EAAS;AACZ,aAAOA,GAAP;AACD,KAJM,CAAT;AAKAM,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ,EAAoB,+BAApB;AACD;;AACD,SAAOA,MAAP;AACD,CAjBD;;AAmBA,IAAMU,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCX,IAAAA,MAAM,EAAEM,eAAe,CACrBK,KAAK,CAACd,IADe,EAErBc,KAAK,CAACC,gBAAN,CAAuBC,WAFF,EAGrBF,KAAK,CAACC,gBAAN,CAAuBL,WAHF,EAIrBI,KAAK,CAACC,gBAAN,CAAuBd,WAJF,CADW;AAOlCC,IAAAA,QAAQ,EAAEY,KAAK,CAACC,gBAAN,CAAuBC,WAPC;AAQlCN,IAAAA,WAAW,EAAEI,KAAK,CAACC,gBAAN,CAAuBL;AARF,GAAZ;AAAA,CAAxB;;AAWA,eAAeb,OAAO,CAACgB,eAAD,CAAP,CAAyBf,KAAzB,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport Table from \"./Table\";\nconst filterdatabyNamebasedonsearchvalue = (\n  data,\n\n  searchValue,\n  filterby\n) => {\n  let cities = [];\n  if (searchValue === \"\") {\n    cities = data.map((obj) => obj);\n  } else {\n    cities = data\n      .filter((obj) => obj[`${filterby}`].toLowerCase().includes(searchValue))\n      .map((obj) => {\n        return obj;\n      });\n  }\n  return cities;\n\n};\nconst getFilterCities = (data, filterby, FilterValue, searchValue) => {\n  console.log(\n    filterdatabyNamebasedonsearchvalue(data, searchValue, filterby),\n    \"filterdatabyfilbykeyandvalue\"\n  );\n  let cities = [];\n  if (filterby === \"All\" || FilterValue === \"All\") {\n    cities = data.map((obj) => obj);\n  } else {\n    cities = data\n      .filter((obj) => obj[`${filterby}`] === FilterValue)\n      .map((obj) => {\n        return obj;\n      });\n    console.log(cities, \"+++++++++++data++++++++++++++\");\n  }\n  return cities;\n};\n\nconst mapStateToProps = (state) => ({\n  cities: getFilterCities(\n    state.data,\n    state.visibilityFilter.filterbyKey,\n    state.visibilityFilter.FilterValue,\n    state.visibilityFilter.searchValue\n  ),\n  filterby: state.visibilityFilter.filterbyKey,\n  FilterValue: state.visibilityFilter.FilterValue,\n});\n\nexport default connect(mapStateToProps)(Table);\n"]},"metadata":{},"sourceType":"module"}