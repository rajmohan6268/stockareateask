{"ast":null,"code":"import { connect } from \"react-redux\";\nimport Table from \"./Table\";\n\nvar filterdatabyNamebasedonsearchvalue = function filterdatabyNamebasedonsearchvalue(data, searchValue) {\n  var warehouse = [];\n\n  if (searchValue === \"\") {\n    warehouse = data.map(function (obj) {\n      return obj;\n    });\n  } else {\n    warehouse = data.filter(function (obj) {\n      return obj.name.includes(searchValue);\n    }).map(function (obj) {\n      return obj;\n    });\n  }\n\n  return warehouse;\n};\n\nvar getFilterCities = function getFilterCities(data, filterby, FilterValue, searchValue) {\n  var cities = [];\n\n  if (!searchValue === \"\") {\n    cities = filterdatabyNamebasedonsearchvalue(data, searchValue, filterby);\n  } else if (filterby === \"All\" || FilterValue === \"All\") {\n    cities = data.map(function (obj) {\n      return obj;\n    });\n  } else {\n    cities = data.filter(function (obj) {\n      return obj[\"\".concat(filterby)] === FilterValue;\n    }).map(function (obj) {\n      return obj;\n    });\n    console.log(cities, \"+++++++++++data++++++++++++++\");\n  }\n\n  return cities;\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    cities: getFilterCities(state.data, state.visibilityFilter.filterbyKey, state.visibilityFilter.FilterValue, state.visibilityFilter.searchValue),\n    filterby: state.visibilityFilter.filterbyKey,\n    FilterValue: state.visibilityFilter.FilterValue\n  };\n};\n\nexport default connect(mapStateToProps)(Table);","map":{"version":3,"sources":["/home/mohan/Downloads/react-redux-filter-example-forked (7)/src/components/Table/index.js"],"names":["connect","Table","filterdatabyNamebasedonsearchvalue","data","searchValue","warehouse","map","obj","filter","name","includes","getFilterCities","filterby","FilterValue","cities","console","log","mapStateToProps","state","visibilityFilter","filterbyKey"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AACA,IAAMC,kCAAkC,GAAG,SAArCA,kCAAqC,CACzCC,IADyC,EAGzCC,WAHyC,EAItC;AACH,MAAIC,SAAS,GAAG,EAAhB;;AACA,MAAID,WAAW,KAAK,EAApB,EAAwB;AACtBC,IAAAA,SAAS,GAAGF,IAAI,CAACG,GAAL,CAAS,UAACC,GAAD;AAAA,aAASA,GAAT;AAAA,KAAT,CAAZ;AACD,GAFD,MAEO;AACLF,IAAAA,SAAS,GAAGF,IAAI,CACbK,MADS,CACF,UAACD,GAAD;AAAA,aAASA,GAAG,CAACE,IAAJ,CAASC,QAAT,CAAkBN,WAAlB,CAAT;AAAA,KADE,EAETE,GAFS,CAEL,UAACC,GAAD,EAAS;AACZ,aAAOA,GAAP;AACD,KAJS,CAAZ;AAKD;;AACD,SAAOF,SAAP;AACD,CAhBD;;AAiBA,IAAMM,eAAe,GAAG,SAAlBA,eAAkB,CAACR,IAAD,EAAOS,QAAP,EAAiBC,WAAjB,EAA8BT,WAA9B,EAA8C;AACpE,MAAIU,MAAM,GAAG,EAAb;;AACA,MAAI,CAACV,WAAD,KAAiB,EAArB,EAAyB;AACvBU,IAAAA,MAAM,GAAGZ,kCAAkC,CAACC,IAAD,EAAOC,WAAP,EAAoBQ,QAApB,CAA3C;AACD,GAFD,MAEO,IAAIA,QAAQ,KAAK,KAAb,IAAsBC,WAAW,KAAK,KAA1C,EAAiD;AACtDC,IAAAA,MAAM,GAAGX,IAAI,CAACG,GAAL,CAAS,UAACC,GAAD;AAAA,aAASA,GAAT;AAAA,KAAT,CAAT;AACD,GAFM,MAEA;AACLO,IAAAA,MAAM,GAAGX,IAAI,CACVK,MADM,CACC,UAACD,GAAD;AAAA,aAASA,GAAG,WAAIK,QAAJ,EAAH,KAAuBC,WAAhC;AAAA,KADD,EAENP,GAFM,CAEF,UAACC,GAAD,EAAS;AACZ,aAAOA,GAAP;AACD,KAJM,CAAT;AAKAQ,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAoB,+BAApB;AACD;;AACD,SAAOA,MAAP;AACD,CAfD;;AAiBA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCJ,IAAAA,MAAM,EAAEH,eAAe,CACrBO,KAAK,CAACf,IADe,EAErBe,KAAK,CAACC,gBAAN,CAAuBC,WAFF,EAGrBF,KAAK,CAACC,gBAAN,CAAuBN,WAHF,EAIrBK,KAAK,CAACC,gBAAN,CAAuBf,WAJF,CADW;AAOlCQ,IAAAA,QAAQ,EAAEM,KAAK,CAACC,gBAAN,CAAuBC,WAPC;AAQlCP,IAAAA,WAAW,EAAEK,KAAK,CAACC,gBAAN,CAAuBN;AARF,GAAZ;AAAA,CAAxB;;AAWA,eAAeb,OAAO,CAACiB,eAAD,CAAP,CAAyBhB,KAAzB,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport Table from \"./Table\";\nconst filterdatabyNamebasedonsearchvalue = (\n  data,\n\n  searchValue\n) => {\n  let warehouse = [];\n  if (searchValue === \"\") {\n    warehouse = data.map((obj) => obj);\n  } else {\n    warehouse = data\n      .filter((obj) => obj.name.includes(searchValue))\n      .map((obj) => {\n        return obj;\n      });\n  }\n  return warehouse;\n};\nconst getFilterCities = (data, filterby, FilterValue, searchValue) => {\n  let cities = [];\n  if (!searchValue === \"\") {\n    cities = filterdatabyNamebasedonsearchvalue(data, searchValue, filterby);\n  } else if (filterby === \"All\" || FilterValue === \"All\") {\n    cities = data.map((obj) => obj);\n  } else {\n    cities = data\n      .filter((obj) => obj[`${filterby}`] === FilterValue)\n      .map((obj) => {\n        return obj;\n      });\n    console.log(cities, \"+++++++++++data++++++++++++++\");\n  }\n  return cities;\n};\n\nconst mapStateToProps = (state) => ({\n  cities: getFilterCities(\n    state.data,\n    state.visibilityFilter.filterbyKey,\n    state.visibilityFilter.FilterValue,\n    state.visibilityFilter.searchValue\n  ),\n  filterby: state.visibilityFilter.filterbyKey,\n  FilterValue: state.visibilityFilter.FilterValue,\n});\n\nexport default connect(mapStateToProps)(Table);\n"]},"metadata":{},"sourceType":"module"}