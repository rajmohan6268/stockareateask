{"ast":null,"code":"import { connect } from \"react-redux\";\nimport Table from \"./Table\";\n\nvar filterdatabyfilbykeyandvalue = function filterdatabyfilbykeyandvalue(filterby) {\n  switch (filterby) {\n    case \"cluster\":\n      return data.filter(function (data) {\n        return data.cluster === FilterValue.toLowerCase();\n      });\n\n    case \"city\":\n      return data.filter(function (data) {\n        return data.city === FilterValue.toLowerCase();\n      });\n\n    case \"space_available\":\n      return data.filter(function (data) {\n        return data.space_available === FilterValue.toLowerCase();\n      });\n\n    default:\n      return data;\n  }\n};\n\nvar getFilterCities = function getFilterCities(data, filterby, FilterValue) {\n  console.log(filterdatabyfilbykeyandvalue(data, filterby, FilterValue), \"filterdatabyfilbykeyandvalue\");\n  var cities = [];\n\n  if (filterby === \"All\" || FilterValue === \"All\") {\n    cities = data.map(function (obj) {\n      return obj;\n    });\n  } else {\n    cities = data.filter(function (obj) {\n      return obj[\"\".concat(filterby)] === FilterValue;\n    }).map(function (obj) {\n      return obj;\n    });\n    console.log(cities, \"+++++++++++data++++++++++++++\");\n  }\n\n  return cities;\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    cities: getFilterCities(state.data, state.visibilityFilter.filterbyKey, state.visibilityFilter.FilterValue),\n    filterby: state.visibilityFilter.filterbyKey,\n    FilterValue: state.visibilityFilter.FilterValue\n  };\n};\n\nexport default connect(mapStateToProps)(Table);","map":{"version":3,"sources":["/home/mohan/Downloads/react-redux-filter-example-forked (7)/src/components/Table/index.js"],"names":["connect","Table","filterdatabyfilbykeyandvalue","filterby","data","filter","cluster","FilterValue","toLowerCase","city","space_available","getFilterCities","console","log","cities","map","obj","mapStateToProps","state","visibilityFilter","filterbyKey"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AACA,IAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACC,QAAD,EAAc;AACjD,UAAQA,QAAR;AACE,SAAK,SAAL;AACE,aAAOC,IAAI,CAACC,MAAL,CACL,UAACD,IAAD;AAAA,eAAUA,IAAI,CAACE,OAAL,KAAiBC,WAAW,CAACC,WAAZ,EAA3B;AAAA,OADK,CAAP;;AAGF,SAAK,MAAL;AACE,aAAOJ,IAAI,CAACC,MAAL,CAAY,UAACD,IAAD;AAAA,eAAUA,IAAI,CAACK,IAAL,KAAcF,WAAW,CAACC,WAAZ,EAAxB;AAAA,OAAZ,CAAP;;AACF,SAAK,iBAAL;AACE,aAAOJ,IAAI,CAACC,MAAL,CACL,UAACD,IAAD;AAAA,eAAUA,IAAI,CAACM,eAAL,KAAyBH,WAAW,CAACC,WAAZ,EAAnC;AAAA,OADK,CAAP;;AAGF;AACE,aAAOJ,IAAP;AAZJ;AAcD,CAfD;;AAgBA,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAACP,IAAD,EAAOD,QAAP,EAAiBI,WAAjB,EAAiC;AAEvDK,EAAAA,OAAO,CAACC,GAAR,CAAaX,4BAA4B,CAACE,IAAD,EAAOD,QAAP,EAAiBI,WAAjB,CAAzC,EAAwE,8BAAxE;AACA,MAAIO,MAAM,GAAG,EAAb;;AACA,MAAIX,QAAQ,KAAK,KAAb,IAAsBI,WAAW,KAAK,KAA1C,EAAiD;AAC/CO,IAAAA,MAAM,GAAGV,IAAI,CAACW,GAAL,CAAS,UAACC,GAAD;AAAA,aAASA,GAAT;AAAA,KAAT,CAAT;AACD,GAFD,MAEO;AACLF,IAAAA,MAAM,GAAGV,IAAI,CACVC,MADM,CACC,UAACW,GAAD;AAAA,aAASA,GAAG,WAAIb,QAAJ,EAAH,KAAuBI,WAAhC;AAAA,KADD,EAENQ,GAFM,CAEF,UAACC,GAAD,EAAS;AACZ,aAAOA,GAAP;AACD,KAJM,CAAT;AAKAJ,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ,EAAoB,+BAApB;AACD;;AACD,SAAOA,MAAP;AACD,CAfD;;AAiBA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCJ,IAAAA,MAAM,EAAEH,eAAe,CACrBO,KAAK,CAACd,IADe,EAErBc,KAAK,CAACC,gBAAN,CAAuBC,WAFF,EAGrBF,KAAK,CAACC,gBAAN,CAAuBZ,WAHF,CADW;AAMlCJ,IAAAA,QAAQ,EAAEe,KAAK,CAACC,gBAAN,CAAuBC,WANC;AAOlCb,IAAAA,WAAW,EAAEW,KAAK,CAACC,gBAAN,CAAuBZ;AAPF,GAAZ;AAAA,CAAxB;;AAUA,eAAeP,OAAO,CAACiB,eAAD,CAAP,CAAyBhB,KAAzB,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport Table from \"./Table\";\nconst filterdatabyfilbykeyandvalue = (filterby) => {\n  switch (filterby) {\n    case \"cluster\":\n      return data.filter(\n        (data) => data.cluster === FilterValue.toLowerCase()\n      );\n    case \"city\":\n      return data.filter((data) => data.city === FilterValue.toLowerCase());\n    case \"space_available\":\n      return data.filter(\n        (data) => data.space_available === FilterValue.toLowerCase()\n      );\n    default:\n      return data;\n  }\n};\nconst getFilterCities = (data, filterby, FilterValue) => {\n \n  console.log( filterdatabyfilbykeyandvalue(data, filterby, FilterValue), \"filterdatabyfilbykeyandvalue\");\n  let cities = [];\n  if (filterby === \"All\" || FilterValue === \"All\") {\n    cities = data.map((obj) => obj);\n  } else {\n    cities = data\n      .filter((obj) => obj[`${filterby}`] === FilterValue)\n      .map((obj) => {\n        return obj;\n      });\n    console.log(cities, \"+++++++++++data++++++++++++++\");\n  }\n  return cities;\n};\n\nconst mapStateToProps = (state) => ({\n  cities: getFilterCities(\n    state.data,\n    state.visibilityFilter.filterbyKey,\n    state.visibilityFilter.FilterValue\n  ),\n  filterby: state.visibilityFilter.filterbyKey,\n  FilterValue: state.visibilityFilter.FilterValue,\n});\n\nexport default connect(mapStateToProps)(Table);\n"]},"metadata":{},"sourceType":"module"}