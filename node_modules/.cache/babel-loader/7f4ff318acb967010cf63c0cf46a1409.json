{"ast":null,"code":"import { connect } from \"react-redux\";\nimport Table from \"./Table\";\n\nvar filterdatabyNamebasedonsearchvalue = function filterdatabyNamebasedonsearchvalue(data, searchValue) {\n  var warehouse = [];\n\n  if (searchValue === \"\") {\n    warehouse = data.map(function (obj) {\n      return obj;\n    });\n  } else {\n    warehouse = data.filter(function (obj) {\n      return obj.name.toLowerCase().includes(searchValue.toLowerCase());\n    }).map(function (obj) {\n      return obj;\n    });\n  }\n\n  return warehouse;\n};\n\nvar getFilterCities = function getFilterCities(data, filterby, FilterValue, searchValue) {\n  // console.log(\n  //   filterdatabyNamebasedonsearchvalue(data, searchValue, filterby),\n  //   \"filterdatabyfilbykeyandvalue\"\n  // );\n  var warehousedata = [];\n\n  if (filterby === \"All\" || FilterValue === \"All\") {\n    warehousedata = data.map(function (obj) {\n      return obj;\n    });\n    warehousedata = filterdatabyNamebasedonsearchvalue(warehousedata, searchValue, filterby);\n  } else {\n    warehousedata = data.filter(function (obj) {\n      return obj[\"\".concat(filterby)] == FilterValue;\n    }).map(function (obj) {\n      return obj;\n    });\n    warehousedata = filterdatabyNamebasedonsearchvalue(warehousedata, searchValue, filterby);\n  }\n\n  return warehousedata;\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    cities: getFilterCities(state.data, state.visibilityFilter.filterbyKey, state.visibilityFilter.FilterValue, state.visibilityFilter.searchValue),\n    filterby: state.visibilityFilter.filterbyKey,\n    FilterValue: state.visibilityFilter.FilterValue\n  };\n};\n\nexport default connect(mapStateToProps)(Table);","map":{"version":3,"sources":["/home/mohan/Downloads/react-redux-filter-example-forked (7)/src/components/Table/index.js"],"names":["connect","Table","filterdatabyNamebasedonsearchvalue","data","searchValue","warehouse","map","obj","filter","name","toLowerCase","includes","getFilterCities","filterby","FilterValue","warehousedata","mapStateToProps","state","cities","visibilityFilter","filterbyKey"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AACA,IAAMC,kCAAkC,GAAG,SAArCA,kCAAqC,CACzCC,IADyC,EAGzCC,WAHyC,EAItC;AACH,MAAIC,SAAS,GAAG,EAAhB;;AACA,MAAID,WAAW,KAAK,EAApB,EAAwB;AACtBC,IAAAA,SAAS,GAAGF,IAAI,CAACG,GAAL,CAAS,UAACC,GAAD;AAAA,aAASA,GAAT;AAAA,KAAT,CAAZ;AACD,GAFD,MAEO;AACLF,IAAAA,SAAS,GAAGF,IAAI,CACbK,MADS,CACF,UAACD,GAAD;AAAA,aACNA,GAAG,CAACE,IAAJ,CAASC,WAAT,GAAuBC,QAAvB,CAAgCP,WAAW,CAACM,WAAZ,EAAhC,CADM;AAAA,KADE,EAITJ,GAJS,CAIL,UAACC,GAAD,EAAS;AACZ,aAAOA,GAAP;AACD,KANS,CAAZ;AAOD;;AACD,SAAOF,SAAP;AACD,CAlBD;;AAmBA,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAACT,IAAD,EAAOU,QAAP,EAAiBC,WAAjB,EAA8BV,WAA9B,EAA8C;AACpE;AACA;AACA;AACA;AACA,MAAIW,aAAa,GAAG,EAApB;;AAEA,MAAIF,QAAQ,KAAK,KAAb,IAAsBC,WAAW,KAAK,KAA1C,EAAiD;AAC/CC,IAAAA,aAAa,GAAGZ,IAAI,CAACG,GAAL,CAAS,UAACC,GAAD;AAAA,aAASA,GAAT;AAAA,KAAT,CAAhB;AACAQ,IAAAA,aAAa,GAAGb,kCAAkC,CAChDa,aADgD,EAEhDX,WAFgD,EAGhDS,QAHgD,CAAlD;AAKD,GAPD,MAOO;AACLE,IAAAA,aAAa,GAAGZ,IAAI,CACjBK,MADa,CACN,UAACD,GAAD;AAAA,aAASA,GAAG,WAAIM,QAAJ,EAAH,IAAsBC,WAA/B;AAAA,KADM,EAEbR,GAFa,CAET,UAACC,GAAD,EAAS;AACZ,aAAOA,GAAP;AACD,KAJa,CAAhB;AAKAQ,IAAAA,aAAa,GAAGb,kCAAkC,CAChDa,aADgD,EAEhDX,WAFgD,EAGhDS,QAHgD,CAAlD;AAMD;;AACD,SAAOE,aAAP;AACD,CA5BD;;AA8BA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCC,IAAAA,MAAM,EAAEN,eAAe,CACrBK,KAAK,CAACd,IADe,EAErBc,KAAK,CAACE,gBAAN,CAAuBC,WAFF,EAGrBH,KAAK,CAACE,gBAAN,CAAuBL,WAHF,EAIrBG,KAAK,CAACE,gBAAN,CAAuBf,WAJF,CADW;AAOlCS,IAAAA,QAAQ,EAAEI,KAAK,CAACE,gBAAN,CAAuBC,WAPC;AAQlCN,IAAAA,WAAW,EAAEG,KAAK,CAACE,gBAAN,CAAuBL;AARF,GAAZ;AAAA,CAAxB;;AAWA,eAAed,OAAO,CAACgB,eAAD,CAAP,CAAyBf,KAAzB,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport Table from \"./Table\";\nconst filterdatabyNamebasedonsearchvalue = (\n  data,\n\n  searchValue\n) => {\n  let warehouse = [];\n  if (searchValue === \"\") {\n    warehouse = data.map((obj) => obj);\n  } else {\n    warehouse = data\n      .filter((obj) =>\n        obj.name.toLowerCase().includes(searchValue.toLowerCase())\n      )\n      .map((obj) => {\n        return obj;\n      });\n  }\n  return warehouse;\n};\nconst getFilterCities = (data, filterby, FilterValue, searchValue) => {\n  // console.log(\n  //   filterdatabyNamebasedonsearchvalue(data, searchValue, filterby),\n  //   \"filterdatabyfilbykeyandvalue\"\n  // );\n  let warehousedata = [];\n\n  if (filterby === \"All\" || FilterValue === \"All\") {\n    warehousedata = data.map((obj) => obj);\n    warehousedata = filterdatabyNamebasedonsearchvalue(\n      warehousedata,\n      searchValue,\n      filterby\n    );\n  } else {\n    warehousedata = data\n      .filter((obj) => obj[`${filterby}`] == FilterValue)\n      .map((obj) => {\n        return obj;\n      });\n    warehousedata = filterdatabyNamebasedonsearchvalue(\n      warehousedata,\n      searchValue,\n      filterby\n    );\n\n  }\n  return warehousedata;\n};\n\nconst mapStateToProps = (state) => ({\n  cities: getFilterCities(\n    state.data,\n    state.visibilityFilter.filterbyKey,\n    state.visibilityFilter.FilterValue,\n    state.visibilityFilter.searchValue\n  ),\n  filterby: state.visibilityFilter.filterbyKey,\n  FilterValue: state.visibilityFilter.FilterValue,\n});\n\nexport default connect(mapStateToProps)(Table);\n"]},"metadata":{},"sourceType":"module"}