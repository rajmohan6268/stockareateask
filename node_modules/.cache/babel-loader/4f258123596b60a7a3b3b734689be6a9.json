{"ast":null,"code":"import { connect } from \"react-redux\";\nimport Table from \"./Table\";\n\nvar filterdatabyfilbykeyandvalue = function filterdatabyfilbykeyandvalue(data, filterby, FilterValue) {\n  console.log(filterby, 'filterbyfilterbyfilterbyfilterbyfilterbyfilterbyfilterby', FilterValue, 'FilterValue');\n\n  switch (filterby) {\n    case \"cluster\":\n      return data.filter(function (obj) {\n        return obj[\"\".concat(filterby)] === FilterValue;\n      }).map(function (obj) {\n        return obj;\n      });\n\n    case \"city\":\n      return data.filter(function (obj) {\n        return obj[\"\".concat(filterby)] === FilterValue;\n      }).map(function (obj) {\n        return obj;\n      });\n\n    case \"space_available\":\n      return data.filter(function (obj) {\n        return obj[\"\".concat(filterby)] === FilterValue;\n      }).map(function (obj) {\n        return obj;\n      });\n\n    default:\n      return data;\n  }\n};\n\nvar getFilterCities = function getFilterCities(data, filterby, FilterValue) {\n  console.log(filterdatabyfilbykeyandvalue(data, filterby, FilterValue), \"filterdatabyfilbykeyandvalue\");\n  var cities = [];\n\n  if (filterby === \"All\" || FilterValue === \"All\") {\n    cities = data.map(function (obj) {\n      return obj;\n    });\n  } else {\n    cities = data.filter(function (obj) {\n      return obj[\"\".concat(filterby)] === FilterValue;\n    }).map(function (obj) {\n      return obj;\n    });\n    console.log(cities, \"+++++++++++data++++++++++++++\");\n  }\n\n  return cities;\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    cities: getFilterCities(state.data, state.visibilityFilter.filterbyKey, state.visibilityFilter.FilterValue),\n    filterby: state.visibilityFilter.filterbyKey,\n    FilterValue: state.visibilityFilter.FilterValue\n  };\n};\n\nexport default connect(mapStateToProps)(Table);","map":{"version":3,"sources":["/home/mohan/Downloads/react-redux-filter-example-forked (7)/src/components/Table/index.js"],"names":["connect","Table","filterdatabyfilbykeyandvalue","data","filterby","FilterValue","console","log","filter","obj","map","getFilterCities","cities","mapStateToProps","state","visibilityFilter","filterbyKey"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AACA,IAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACC,IAAD,EAAOC,QAAP,EAAiBC,WAAjB,EAAiC;AACpEC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAAqB,0DAArB,EAAgFC,WAAhF,EAA4F,aAA5F;;AACA,UAAQD,QAAR;AACE,SAAK,SAAL;AACE,aAAOD,IAAI,CACRK,MADI,CACG,UAACC,GAAD;AAAA,eAASA,GAAG,WAAIL,QAAJ,EAAH,KAAuBC,WAAhC;AAAA,OADH,EAEJK,GAFI,CAEA,UAACD,GAAD,EAAS;AACZ,eAAOA,GAAP;AACD,OAJI,CAAP;;AAKF,SAAK,MAAL;AACE,aAAON,IAAI,CACRK,MADI,CACG,UAACC,GAAD;AAAA,eAASA,GAAG,WAAIL,QAAJ,EAAH,KAAuBC,WAAhC;AAAA,OADH,EAEJK,GAFI,CAEA,UAACD,GAAD,EAAS;AACZ,eAAOA,GAAP;AACD,OAJI,CAAP;;AAKF,SAAK,iBAAL;AACE,aAAON,IAAI,CACRK,MADI,CACG,UAACC,GAAD;AAAA,eAASA,GAAG,WAAIL,QAAJ,EAAH,KAAuBC,WAAhC;AAAA,OADH,EAEJK,GAFI,CAEA,UAACD,GAAD,EAAS;AACZ,eAAOA,GAAP;AACD,OAJI,CAAP;;AAKF;AACE,aAAON,IAAP;AApBJ;AAsBD,CAxBD;;AAyBA,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,CAACR,IAAD,EAAOC,QAAP,EAAiBC,WAAjB,EAAiC;AACvDC,EAAAA,OAAO,CAACC,GAAR,CACEL,4BAA4B,CAACC,IAAD,EAAOC,QAAP,EAAiBC,WAAjB,CAD9B,EAEE,8BAFF;AAIA,MAAIO,MAAM,GAAG,EAAb;;AACA,MAAIR,QAAQ,KAAK,KAAb,IAAsBC,WAAW,KAAK,KAA1C,EAAiD;AAC/CO,IAAAA,MAAM,GAAGT,IAAI,CAACO,GAAL,CAAS,UAACD,GAAD;AAAA,aAASA,GAAT;AAAA,KAAT,CAAT;AACD,GAFD,MAEO;AACLG,IAAAA,MAAM,GAAGT,IAAI,CACVK,MADM,CACC,UAACC,GAAD;AAAA,aAASA,GAAG,WAAIL,QAAJ,EAAH,KAAuBC,WAAhC;AAAA,KADD,EAENK,GAFM,CAEF,UAACD,GAAD,EAAS;AACZ,aAAOA,GAAP;AACD,KAJM,CAAT;AAKAH,IAAAA,OAAO,CAACC,GAAR,CAAYK,MAAZ,EAAoB,+BAApB;AACD;;AACD,SAAOA,MAAP;AACD,CAjBD;;AAmBA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCF,IAAAA,MAAM,EAAED,eAAe,CACrBG,KAAK,CAACX,IADe,EAErBW,KAAK,CAACC,gBAAN,CAAuBC,WAFF,EAGrBF,KAAK,CAACC,gBAAN,CAAuBV,WAHF,CADW;AAMlCD,IAAAA,QAAQ,EAAEU,KAAK,CAACC,gBAAN,CAAuBC,WANC;AAOlCX,IAAAA,WAAW,EAAES,KAAK,CAACC,gBAAN,CAAuBV;AAPF,GAAZ;AAAA,CAAxB;;AAUA,eAAeL,OAAO,CAACa,eAAD,CAAP,CAAyBZ,KAAzB,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport Table from \"./Table\";\nconst filterdatabyfilbykeyandvalue = (data, filterby, FilterValue) => {\n  console.log(filterby,'filterbyfilterbyfilterbyfilterbyfilterbyfilterbyfilterby',FilterValue,'FilterValue')\n  switch (filterby) {\n    case \"cluster\":\n      return data\n        .filter((obj) => obj[`${filterby}`] === FilterValue)\n        .map((obj) => {\n          return obj;\n        });\n    case \"city\":\n      return data\n        .filter((obj) => obj[`${filterby}`] === FilterValue)\n        .map((obj) => {\n          return obj;\n        });\n    case \"space_available\":\n      return data\n        .filter((obj) => obj[`${filterby}`] === FilterValue)\n        .map((obj) => {\n          return obj;\n        });\n    default:\n      return data;\n  }\n};\nconst getFilterCities = (data, filterby, FilterValue) => {\n  console.log(\n    filterdatabyfilbykeyandvalue(data, filterby, FilterValue),\n    \"filterdatabyfilbykeyandvalue\"\n  );\n  let cities = [];\n  if (filterby === \"All\" || FilterValue === \"All\") {\n    cities = data.map((obj) => obj);\n  } else {\n    cities = data\n      .filter((obj) => obj[`${filterby}`] === FilterValue)\n      .map((obj) => {\n        return obj;\n      });\n    console.log(cities, \"+++++++++++data++++++++++++++\");\n  }\n  return cities;\n};\n\nconst mapStateToProps = (state) => ({\n  cities: getFilterCities(\n    state.data,\n    state.visibilityFilter.filterbyKey,\n    state.visibilityFilter.FilterValue\n  ),\n  filterby: state.visibilityFilter.filterbyKey,\n  FilterValue: state.visibilityFilter.FilterValue,\n});\n\nexport default connect(mapStateToProps)(Table);\n"]},"metadata":{},"sourceType":"module"}